// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: tages.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImageWorker_UploadImage_FullMethodName   = "/imageworker.ImageWorker/UploadImage"
	ImageWorker_InformImage_FullMethodName   = "/imageworker.ImageWorker/InformImage"
	ImageWorker_DownloadImage_FullMethodName = "/imageworker.ImageWorker/DownloadImage"
)

// ImageWorkerClient is the client API for ImageWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageWorkerClient interface {
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (ImageWorker_UploadImageClient, error)
	InformImage(ctx context.Context, opts ...grpc.CallOption) (ImageWorker_InformImageClient, error)
	DownloadImage(ctx context.Context, opts ...grpc.CallOption) (ImageWorker_DownloadImageClient, error)
}

type imageWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewImageWorkerClient(cc grpc.ClientConnInterface) ImageWorkerClient {
	return &imageWorkerClient{cc}
}

func (c *imageWorkerClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (ImageWorker_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageWorker_ServiceDesc.Streams[0], ImageWorker_UploadImage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &imageWorkerUploadImageClient{stream}
	return x, nil
}

type ImageWorker_UploadImageClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type imageWorkerUploadImageClient struct {
	grpc.ClientStream
}

func (x *imageWorkerUploadImageClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageWorkerUploadImageClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imageWorkerClient) InformImage(ctx context.Context, opts ...grpc.CallOption) (ImageWorker_InformImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageWorker_ServiceDesc.Streams[1], ImageWorker_InformImage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &imageWorkerInformImageClient{stream}
	return x, nil
}

type ImageWorker_InformImageClient interface {
	Send(*InformRequest) error
	CloseAndRecv() (*InformResponse, error)
	grpc.ClientStream
}

type imageWorkerInformImageClient struct {
	grpc.ClientStream
}

func (x *imageWorkerInformImageClient) Send(m *InformRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageWorkerInformImageClient) CloseAndRecv() (*InformResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(InformResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imageWorkerClient) DownloadImage(ctx context.Context, opts ...grpc.CallOption) (ImageWorker_DownloadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageWorker_ServiceDesc.Streams[2], ImageWorker_DownloadImage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &imageWorkerDownloadImageClient{stream}
	return x, nil
}

type ImageWorker_DownloadImageClient interface {
	Send(*DownloadRequest) error
	CloseAndRecv() (*DownloadResponse, error)
	grpc.ClientStream
}

type imageWorkerDownloadImageClient struct {
	grpc.ClientStream
}

func (x *imageWorkerDownloadImageClient) Send(m *DownloadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageWorkerDownloadImageClient) CloseAndRecv() (*DownloadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageWorkerServer is the server API for ImageWorker service.
// All implementations must embed UnimplementedImageWorkerServer
// for forward compatibility
type ImageWorkerServer interface {
	UploadImage(ImageWorker_UploadImageServer) error
	InformImage(ImageWorker_InformImageServer) error
	DownloadImage(ImageWorker_DownloadImageServer) error
	mustEmbedUnimplementedImageWorkerServer()
}

// UnimplementedImageWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedImageWorkerServer struct {
}

func (UnimplementedImageWorkerServer) UploadImage(ImageWorker_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedImageWorkerServer) InformImage(ImageWorker_InformImageServer) error {
	return status.Errorf(codes.Unimplemented, "method InformImage not implemented")
}
func (UnimplementedImageWorkerServer) DownloadImage(ImageWorker_DownloadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadImage not implemented")
}
func (UnimplementedImageWorkerServer) mustEmbedUnimplementedImageWorkerServer() {}

// UnsafeImageWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageWorkerServer will
// result in compilation errors.
type UnsafeImageWorkerServer interface {
	mustEmbedUnimplementedImageWorkerServer()
}

func RegisterImageWorkerServer(s grpc.ServiceRegistrar, srv ImageWorkerServer) {
	s.RegisterService(&ImageWorker_ServiceDesc, srv)
}

func _ImageWorker_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageWorkerServer).UploadImage(&imageWorkerUploadImageServer{stream})
}

type ImageWorker_UploadImageServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type imageWorkerUploadImageServer struct {
	grpc.ServerStream
}

func (x *imageWorkerUploadImageServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageWorkerUploadImageServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImageWorker_InformImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageWorkerServer).InformImage(&imageWorkerInformImageServer{stream})
}

type ImageWorker_InformImageServer interface {
	SendAndClose(*InformResponse) error
	Recv() (*InformRequest, error)
	grpc.ServerStream
}

type imageWorkerInformImageServer struct {
	grpc.ServerStream
}

func (x *imageWorkerInformImageServer) SendAndClose(m *InformResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageWorkerInformImageServer) Recv() (*InformRequest, error) {
	m := new(InformRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImageWorker_DownloadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageWorkerServer).DownloadImage(&imageWorkerDownloadImageServer{stream})
}

type ImageWorker_DownloadImageServer interface {
	SendAndClose(*DownloadResponse) error
	Recv() (*DownloadRequest, error)
	grpc.ServerStream
}

type imageWorkerDownloadImageServer struct {
	grpc.ServerStream
}

func (x *imageWorkerDownloadImageServer) SendAndClose(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageWorkerDownloadImageServer) Recv() (*DownloadRequest, error) {
	m := new(DownloadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageWorker_ServiceDesc is the grpc.ServiceDesc for ImageWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imageworker.ImageWorker",
	HandlerType: (*ImageWorkerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImage",
			Handler:       _ImageWorker_UploadImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "InformImage",
			Handler:       _ImageWorker_InformImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadImage",
			Handler:       _ImageWorker_DownloadImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "tages.proto",
}
